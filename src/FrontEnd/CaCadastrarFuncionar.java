/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrontEnd;

import javax.swing.JOptionPane;
import BackEnd.ConexaoMySQL;
import java.sql.SQLException;
import javax.swing.JTextField;

/**
 *
 * @author Igor
 */
public class CaCadastrarFuncionar extends javax.swing.JDialog {

    private ConexaoMySQL c;
    private int Repetido;
    private int Cod;

    public CaCadastrarFuncionar(int Codigo) {
        initComponents();
        this.c = new ConexaoMySQL();
        this.setModal(true);
         Cod= Codigo;
        
        if(Codigo == 0){
            this.setTitle("Cadastrando Funcionário");

        }
        else{
            this.setTitle("Editando Funcionário");

            try{
                String SQL="select * From funcionario where codFuncionario = "+Codigo;
                this.c.setResultSet(SQL);
                this.c.getResultSet().next();

                txtNome.setText(this.c.getResultSet().getString("Nome"));
                txtCPF.setText(this.c.getResultSet().getString("CPF"));
                txtUSuario.setText(this.c.getResultSet().getString("Usuario"));
                cbTipoConta.setSelectedIndex(this.c.getResultSet().getInt("IsAdministrador"));

            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(this, e);
            }
        }

    }
        public boolean IsInt(JTextField TextField, String Campo){
        try {
            int i=Integer.parseInt(TextField.getText());
            return true;
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(
                    null,
                    "O valor do campo '" + Campo + "' não é válido. \n Informe um valor Inteiro.",
                    "Erro de Entrada" , JOptionPane.ERROR_MESSAGE);
            TextField.requestFocus();
            TextField.setText("");
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtCPF = new javax.swing.JTextField();
        txtUSuario = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        cbTipoConta = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Nome :");

        jLabel2.setText("CPF :");

        jLabel3.setText("Ususário:");

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        cbTipoConta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Operador", "Administrador" }));

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtUSuario)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbTipoConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtCPF, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNome, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(3, 3, 3)
                .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUSuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTipoConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed

        //// A String SQL aqui é usada para verificar se o Usuario escolhido é repetido,
        /// se for Quantidade sera maior que 0 oque atribui o valor de Repetido em 1 através da condicional if

        
        

        
        try{
            String SQL ="Select count(*) as Quantidade from funcionario where Usuario Like Binary'"+ txtUSuario.getText()+ "';";
           
            this.c.setResultSet(SQL);            
            this.c.getResultSet().next();    

            if(this.c.getResultSet().getInt("Quantidade") > 0){
                Repetido=1;
               
            }
            else{
                Repetido=0;
                }
        }
        
        catch(SQLException e){
            JOptionPane.showMessageDialog(this,e);
        }

        int TipoConta;
            if(cbTipoConta.getSelectedIndex()==0){
                TipoConta=0;

            }
            else{
               TipoConta=1;
            }
            
            if(IsInt(txtCPF, "CPF")){
            
            if(Cod==0){// cadastrar
            
                ///A String Repetido serve para fazer o comando SQL que verifica se o nome de usuário já está em uso através da variavel Quantidade 
                if(Repetido==0){
                    
                    //Essa sequencia de Strings é para validar que os campos estão preenchidos, e cada um possui uma condicional para fazer o teste
                    
                    String CPF=txtCPF.getText();
                    int TamanhoCPF=CPF.length();
                    String Nome=txtNome.getText();
                    int TamanhoNome=Nome.length();
                    String Usuario=txtUSuario.getText();
                    int TamanhoUsuario=Usuario.length();
                    

                    if(TamanhoNome>=1){
                        if(TamanhoUsuario>=1){
                            if(TamanhoCPF>=6){
                                

                                String SQL= "Insert into funcionario(Nome, CPF, Usuario, Senha,IsAdministrador)"
                                + " Values('" + txtNome.getText() + "','" +txtCPF.getText() + "','" +txtUSuario.getText() +"','"+txtCPF.getText() +"','" +TipoConta+"');";

                                this.c.SQLExecute(SQL);
                                this.dispose();
                                JOptionPane.showMessageDialog(this, "Cadastrado com sucesso");
                            }

                            else{
                                JOptionPane.showMessageDialog(this, "O CPF está muito pequeno, deve ter pelo menos 6 caracteres.");
                                txtCPF.setText("");
                                txtCPF.requestFocus();

                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(this, "O nome de Usuário está muito pequeno. Favor escolher um maior.");
                            txtUSuario.setText("");
                            txtUSuario.requestFocus();

                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "O Nome está muito pequeno. Favor escolher um maior.");
                        txtNome.setText("");
                        txtNome.requestFocus();

                    }


                }
                else{
                    JOptionPane.showMessageDialog(this, "Nome de usuário definido já existente.");

                    txtUSuario.setText("");
                    txtUSuario.requestFocus();

                }
            }
            
            else{//Editar 
                
                ///A String Repetido serve para fazer o comando SQL que verifica se o nome de usuário já está em uso através da variavel Quantidade 
                if(Repetido==0){

                    String CPF=txtCPF.getText();
                    int TamanhoCPF=CPF.length();

                    if(TamanhoCPF>=6){
                        /// A String SQL esta sendo usada para fazer o comando SQL de inserção de funcionários  com os dados informados. Feito isso será fechada a jabnela e exibida uma mensagem
                        /// que declara que foi cadasrado com sucesso.

                        String SQL= "Update funcionario set Nome = '"+txtNome.getText()+"',CPF = '"+txtCPF.getText()+"'"
                                + ",Usuario = '"+txtUSuario.getText()+"',IsAdministrador ='"+cbTipoConta.getSelectedIndex()+"' where( CodFuncionario = '"+Cod+"' )";
                        
                        this.c.SQLExecute(SQL);
                        this.dispose();
                        JOptionPane.showMessageDialog(this, "Editado com sucesso");                       
                        
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "O CPF está muito pequeno, deve ter pelo menos 6 caracteres.");
                        txtCPF.setText("");
                        txtCPF.requestFocus();

                    }


                }
                else{
                    JOptionPane.showMessageDialog(this, "Nome de usuário definido já existente.");

                    txtUSuario.setText("");
                    txtUSuario.requestFocus();

                }
            }
            }
            else{
                JOptionPane.showMessageDialog(this, "Favor preencher CPF apenas com numeros");
            }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<String> cbTipoConta;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtCPF;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtUSuario;
    // End of variables declaration//GEN-END:variables
}
